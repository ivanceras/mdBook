environment:
  global:
    PROJECT_NAME: mdBook
  matrix:
    # Stable channel
    - TARGET: i686-pc-windows-msvc
      RUST_CHANNEL: stable
    - TARGET: x86_64-pc-windows-msvc
      RUST_CHANNEL: stable
    # Nightly channel
    - TARGET: x86_64-pc-windows-msvc
      RUST_CHANNEL: nightly

# Install Rust and Cargo
install:
  # Since rust-lang-libs is currently sharing 1 builder, only run 1 job when a
  # PR is opened. Merges to master or tags will run all jobs.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -gt 0 -and ($env:TARGET -ne "x86_64-pc-windows-msvc" -or $env:RUST_CHANNEL -ne "stable") ) {Exit-AppveyorBuild}
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_CHANNEL%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

build: false

# Equivalent to Travis' `script` phase
test_script:
  - cargo test --all
  - cargo test --all --no-default-features

before_deploy:
  # Generate artifacts for release
  - cargo rustc --bin mdbook --release -- -C lto
  - mkdir staging
  - copy target\release\mdbook.exe staging
  - cd staging
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

deploy:
  description: 'Windows release'
  artifact: /.*\.zip/
  auth_token: $(GITHUB_TOKEN)
  provider: GitHub
  on:
    RUST_CHANNEL: stable
    appveyor_repo_tag: true

branches:
  only:
    - master
    - /^v\d+\.\d+\.\d+.*$/
